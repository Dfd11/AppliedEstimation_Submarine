%% File Setup
simulationfile = 'ocean_sim.txt';
imu_file = 'imu.csv';
press_file = 'fluid_pressure.csv';
dvl_file = 'dvl.csv';
true_file = 'odom.csv';
vbs_file = 'vbs.csv';

sim_data = setup_simulation_file('DataSets/',imu_file,press_file,dvl_file,vbs_file,true_file);

%% Depth Plot
%Params
t_margin = 0.5;
% Initialize figure and settings
depth_fig = figure('Name', 'Depth', 'NumberTitle', 'off');
depth_ax = axes(depth_fig);
hold(depth_ax, 'on');

% Default graph settings
graphTitle = 'Depth Error';
xLimits = [-t_margin, n_timesteps*dt+t_margin];
yLimits = [min(state(3,:)) - 0.1 , max(state(3,:)) + 0.1];
gridOn = true;
showErrorBars = true;

% Configure plot
depth_ax.XLim = xLimits;
depth_ax.YLim = yLimits;
grid(depth_ax, gridOn);
title(depth_ax, graphTitle);
xlabel(depth_ax, 'Timesteps');
ylabel(depth_ax, 'Error');

% Initialize legend
legend(depth_ax, 'Location', 'best');

% Data storage
%xData = [];
%yData = [];
%stdDevs = [];
depth_lineHandle = plot(depth_ax, NaN, NaN, '-o', 'DisplayName', 'Data');

if showErrorBars
    errorBarHandle = errorbar(depth_ax, NaN, NaN, NaN, 'o', 'Color', [0, 0.447, 0.741], 'DisplayName', 'Uncertainty');
else
    errorBarHandle = [];
end

%% Error Plot
%Params
t_margin = 0.5;
% Initialize figure and settings
error_fig = figure('Name', 'Error', 'NumberTitle', 'off');
error_ax = axes(error_fig);
hold(errorax, 'on');

% Default graph settings
graphTitle = 'Depth Error';
xLimits = [-t_margin, n_timesteps*dt+t_margin];
yLimits = [min(state(3,:)) - 0.5 , max(state(3,:)) + 0.5];
gridOn = true;
showErrorBars = true;

% Configure plot
error_ax.XLim = xLimits;
error_ax.YLim = yLimits;
grid(error_ax, gridOn);
title(error_ax, graphTitle);
xlabel(error_ax, 'Timesteps');
ylabel(error_ax, 'Error');

% Initialize legend
legend(error_ax, 'Location', 'best');

% Data storage
xData = [];
yData = [];
stdDevs = [];
lineHandle = plot(error_ax, NaN, NaN, '-o', 'DisplayName', 'Data');

if showErrorBars
    errorBarHandle = errorbar(error_ax, NaN, NaN, NaN, 'o', 'Color', [0, 0.447, 0.741], 'DisplayName', 'Uncertainty');
else
    errorBarHandle = [];
end

%% Initialize EKF Parameters
global R 
global Q 
mu = [0 ; 0 ; 0];
sigma = diag(ones(1,3));

R = [0.001 0 0;
     0 0.001 0;
     0 0 0.001
     ];

Q = [0.001 0;
     0 0.001
     ];

%% Constants
C2 = 101325.0 ; %From SAM ROS
C3 = 9806.65 ; %From SAM ROS
g= 9.81 ; %m/s^2
p=1000;
VSAM = 0.0202555; %m^3 %DAVID change SAM Volume
VVBS = 2.5535e-4 ; %m^3 %DAVID Check if we are still going to use this calculated value or ROS?
MSAM = 20; %kg %DAVID change SAM Mass

%% Sim Initialize
%t = 0;
dt = 0.1;
n_timesteps = size(sim_data,1);
global meas_en

%Storage Arrays
state = zeros(3,n_timesteps);
timesteps = zeros(1, n_timesteps);
pose_errors = zeros(1, n_timesteps);
sigmas = zeros(size(sigma(:), 1), n_timesteps);

for tstep=1:n_timesteps
    t = sim_data(tstep,1);
    vbs = sim_data(tstep,2);
    true_pose = sim_data(tstep,3);
    meas_en = sim_data(tstep,4:6);

    z = [];
    if meas_en(2) %DVL
        z = [z ; sim_data(tstep,10)];
    end

    if meas_en(3) %Pressure
        z = [z ; sim_data(tstep,12)];
    end
    
    %Predict Phase mu = mu(t-1) + u
    u = calculate_odometry(VSAM,VVBS,MSAM,g,vbs,dt,mu);
    [mu_bar, sigma_bar] = predict_(mu, sigma, u,dt);

    %Update Phase
    try
        [mu, sigma] = update_(mu_bar, sigma_bar,C3, C2,z);
    catch
        warning("Error")
        pose_errors(tstep) = true_pose - mu(3); %Error for the depth
        sigmas(:,tstep) = sigma(:); %Covariance matrix
        timesteps(tstep) = t; %Time stamp
        break;
    end

    %Statistics
    state(tstep) = mu(:);
    pose_errors(tstep) = true_pose - mu(3); %Error for the depth
    sigmas(:,tstep) = sigma(:); %Covariance matrix
    timesteps(tstep) = t; %Time stamp

end


    % Simulated update loop
    for t = 1:100
        % Generate simulated data
        newY = sin(t / 10) + randn() * 0.1; % Example data
        newStdDev = 0.2 + rand() * 0.1;    % Example uncertainty

        % Update data
        xData = [xData, t];
        yData = [yData, newY];
        stdDevs = [stdDevs, newStdDev];

        % Update plot
        set(lineHandle, 'XData', xData, 'YData', yData);

        if showErrorBars
            set(errorBarHandle, 'XData', xData, 'YData', yData, 'UData', stdDevs, 'LData', stdDevs);
        end

        % Update title dynamically (optional)
        title(error_ax, [graphTitle, ' - Timestep ', num2str(t)]);

        % Pause to simulate real-time updates
        pause(0.1);
    end